# PostgreSQL. Versions 9.3 and up are supported.
# It is crucial to ensure that the PostgreSQL data directory has sufficient space to operate. Regularly check disk space with `df -h` and clean up unnecessary files or expand disk size as needed. Ensure that the disk space is regularly checked and cleaned to prevent errors like "PG::DiskFull". It's also important to have a contingency plan for disk space exhaustion. Make sure to check the disk space before attempting to create databases to avoid running into "PG::DiskFull" errors. If you encounter a "PG::DiskFull" error, resolve the disk space issue before attempting to create or migrate databases. Additionally, consider setting up monitoring and alerts for disk space usage to proactively manage the environment.
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On macOS with MacPorts:
#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem 'pg'
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For disk space issues, run `df -h` to check available space and `du -h <directory>` to identify large files or directories. Clean up unnecessary files or expand disk size as needed. Ensure regular monitoring and proactive management of disk space to prevent "PG::DiskFull" errors. In case of a "PG::DiskFull" error, resolve the disk space issue before attempting to create or migrate databases.
  host: <%= ENV["BASE_SOURCE_DATABASE_HOST"] || "localhost" %>
  pool: <%= ENV.fetch("RAILS_MAX_THREADS", 5).to_i %>
  username: <%= ENV["DATABASE_USERNAME"] || "postgres" %> # Updated to "postgres" to resolve conflict
  port: 5432
  timeout: 5000 # Set a timeout value in milliseconds for connecting to the database server. Adjust as needed.

development: &development
  <<: *default
  database: <%= ENV.fetch("DATABASE_NAME") { "base_source_development" } %>
  password: <%= ENV["DATABASE_PASSWORD"] || "postgres" %> # Resolved conflict by using "postgres" as default

test:
  <<: *development
  database: <%= ENV.fetch("DATABASE_NAME") { "base_source_test" } %>
  password: <%= ENV.fetch("DATABASE_PASSWORD", "postgres") %> # Resolved conflict by using "postgres" as default

production:
  <<: *development
  database: <%= ENV.fetch("DATABASE_NAME") { "base_source_production" } %>
  username: <%= ENV.fetch("DATABASE_USERNAME", "postgres") %> # Resolved conflict by using "postgres" as default
  password: <%= ENV.fetch("DATABASE_PASSWORD", "base_source_password") %> # Resolved conflict by using "base_source_password" as default

staging:
  <<: *development
  database: <%= ENV.fetch("DATABASE_NAME") { "base_source_staging" } %>
  username: <%= ENV.fetch("DATABASE_USERNAME", "postgres") %> # Resolved conflict by using "postgres" as default
  password: <%= ENV.fetch("DATABASE_PASSWORD", "base_source_password") %> # Resolved conflict by using "base_source_password" as default

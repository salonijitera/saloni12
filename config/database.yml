# PostgreSQL. Versions 9.3 and up are supported.
# It is crucial to ensure that the PostgreSQL data directory has sufficient space to operate. Regularly check disk space with `df -h` and clean up unnecessary files or expand disk size as needed. Ensure that the database.yml file does not contain hard-coded paths that could lead to incorrect file storage locations. In case of a "PG::DiskFull" error, free up space or increase disk size before attempting to create databases or perform other database operations. Ensure that the database configuration is correct and the environment variables are properly set. Check the PostgreSQL server logs for more detailed information about the disk space issue.
# Note: The following configuration does not address the disk space issue directly. It is the responsibility of the system administrator to ensure adequate disk space is available.
# Ensure that the PostgreSQL data directory has sufficient space to operate. Regularly check disk space with `df -h` and clean up unnecessary files or expand disk size as needed. In case of a "PG::DiskFull" error, free up space or increase disk size before attempting to create databases or perform other database operations.
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On macOS with MacPorts:
#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem 'pg'
#
default: &default
  adapter: postgresql
  encoding: unicode
  host: <%= ENV.fetch("BASE_SOURCE_DATABASE_HOST", "localhost") %>
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  username: <%= ENV.fetch("BASE_SOURCE_USERNAME") { "postgres" } %>
  port: 5432
  # For details on connection pooling, see Rails configuration guide. Ensure the database user has necessary permissions and the PostgreSQL data directory has sufficient space to operate.
  # https://guides.rubyonrails.org/configuring.html#database-pooling

development:
  <<: *default
  database: <%= ENV.fetch("DATABASE_NAME") { "base_source_development" } %>
  password: <%= ENV.fetch("BASE_SOURCE_PASSWORD", "postgres") %>

  # The specified database role being used to connect to postgres. Verify the role has the correct permissions.
  # To create additional roles in postgres see `$ createuser --help`.
  # When left blank, postgres will use the default role. This is
  # the same name as the operating system user that initialized the database. Ensure the PostgreSQL data directory has sufficient space to prevent "PG::DiskFull" errors.

  # The password associated with the postgres role (username).
  #password:

  # Connect on a domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  #host: localhost

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.

  # Schema search path. The server defaults to $user,public. Verify the role has the correct permissions and sufficient disk space is available.
  #schema_search_path: myapp,sharedapp,public

  # Minimum log levels, in increasing order:
  #   debug5, debug4, debug3, debug2, debug1,
  #   log, notice, warning, error, fatal, and panic
  # Defaults to warning.
  #min_messages: notice

test:
  <<: *default
  database: <%= ENV.fetch("DATABASE_NAME") { "base_source_test" } %>
  password: <%= ENV.fetch("BASE_SOURCE_PASSWORD", "postgres") %>

# As with config/credentials.yml, you never want to store sensitive information,
# like your database password, in your source code. Instead, provide the password as an environment variable.
# Ensure the database configuration is correct and the environment variables are properly set.
# Instead, provide the password as a unix environment variable when you boot
# the app. Read https://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full rundown on how to provide these environment variables in a production deployment.
# production deployment.
#
# On Heroku and other platform providers, you may have a full connection URL
# available as an environment variable. For example, DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# You can use this database configuration with:
# Ensure the database configuration is correct and the environment variables are properly set.
#   production:
#     url: <%= ENV['DATABASE_URL'] %>

production: &production
  <<: *default
  database: <%= ENV.fetch("DATABASE_NAME") { "base_source_production" } %>
  username: <%= ENV["BASE_SOURCE_USERNAME"] || "base_source" %>
  password: <%= ENV.fetch("BASE_SOURCE_PASSWORD", "base_source_password") %>
  # Ensure the PostgreSQL data directory has sufficient space to prevent "PG::DiskFull" errors.

staging: &staging
  <<: *production
  database: <%= ENV.fetch("DATABASE_NAME") { "base_source_staging" } %>
  username: <%= ENV["BASE_SOURCE_USERNAME"] || "base_source" %>
  password: <%= ENV.fetch("BASE_SOURCE_PASSWORD", "base_source_password") %>

# Ensure there is enough disk space for PostgreSQL to operate and consider setting up monitoring and alerts for disk space usage.
